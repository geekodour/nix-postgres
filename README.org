* nix-postgres-docker
NOTE: wip, i am still writing this out. brb doing side quests

#+begin_quote
While I think I should use a managed pg or one of those baked distributions already, I also think selfhosting pg for my homelab has taught me many lessons that I wouldn't learn otherwise, so I guess we shall continue doing so "for now". (that too in a container)

Deploying postgres on containers is [[https://www.reddit.com/r/PostgreSQL/comments/11nwf54/container_or_not/][definitely a matter]] of [[https://www.reddit.com/r/PostgreSQL/comments/1c2rbow/why_not_run_production_postgres_in_docker/][discussion]]. one of the issues i faced was docker messing up with [[https://www.instaclustr.com/blog/postgresql-docker-and-shared-memory/][dynamic shared memory configuration in postgres]], but otherwise i've been happy running postgres in a container. (i personally have been using [[https://github.com/hashicorp/nomad][nomad]] so far)

How to deploy, how to add a connection pooler etc. are concerns which are out of the scope of this repo at the moment. I'll keep this document focused on "how to setup WAL archival using WAL-G" when running postgres in a container.
#+end_quote
** Context and the problem
To give you the context, I've been happily running postgres in my homelab without a backup(who needs one anyway) but then I planned on doing a user facing side project for which I decided, will use the same pg cluster. But now, even though I'll get only 2 users it's my duty to ensure that their data remains intact despite of the unfathomable amount of fuckery i am about to unleash on my homelab servers. So, in conclusion, i need a backup policy for the database.

I already have one actually, ~pg_dump~ > [[https://restic.net/][restic]] > [[https://en.wikipedia.org/wiki/Backblaze][blackblaze B2]], this backs up more than just a db though. But, it is not ideal(various reasons) for a database that'll have a continuous flow of writes to it. For this, you need what postgres folks call "[[https://www.postgresql.org/docs/current/continuous-archiving.html][continuous archival]]" (many ways to do it, see aside section below). For sqlite, there's [[https://litestream.io/][litestream]] which does a similar thing pretty brilliantly.

So after doing some comparison of various backup solutions/methods, i decided to do with [[https://github.com/wal-g/wal-g][wal-g]]. You could actually do it without any 3rd party tool but they definitely help. (See below for comparison)

Previously I've been running a custom docker image based on the official postgres docker image to install the required extension. It'd be nice to extend it! In case of ~wal-g~, the running postgres service([[https://www.interdb.jp/pg/pgsql09/10.html][archiver (background) process]]) needs to call ~wal-g~ from the [[https://www.postgresql.org/docs/current/runtime-config-wal.html#GUC-ARCHIVE-COMMAND][archive_command]] postgres configuration. (This gets triggered every-time there's a new ~WAL segment~, which can in-turn be triggered by setting ~archive_timeout~ in case your db doesn't make enough commits to generate a new ~WAL segment~ but you still want continuous archival). Basically, you need ~wal-g~ and ~postgres~ in the same runtime and be callable(~$PATH~).

Now to get ~wal-g~ running I just need to install ~wal-g~ into the docker image(that I have already), that's a ~apt-get~. Simple right? Yes! There are even some [[https://github.com/wal-g/wal-g/issues/473][off the shelf]] [[https://github.com/stephane-klein/playground-postgresql-walg/blob/60c483c7675899bdf3a4ad3f0d7627f3998432b8/docker-image/postgres-with-wal-g/Dockerfile#L20][community]] [[https://hub.docker.com/r/apkawa/wal-g][repos]] online for this exact usecase.

But I am stupid, so I decide to make my life harder. I have rest of my infra wired nicely in [[https://zero-to-nix.com/concepts/flakes][nix flakes]] and I run things on an arm machine and also locally(x86), so I thought to myself it'd be really nice to have "most" things in a flake. Honestly would've gone the first way if I knew doing it the nix way would put me in the trenches.

So now finally our problem becomes:
#+begin_quote
"Create a multi-arch production-ready(walg+compatibility w official image+custom extensions) postgres docker image using NixOS dockerTools AND make sure the auxiliary processes(eg. base backup shipping, cleanup etc.) are running as expected"
#+end_quote
** Solution
*** Creating the docker image / Breakdown of postgres docker image.
#+begin_quote
I initially attempted to base off the official postgres docker image, this was not successful. So the alternative is building the image directly from Nix definitions. [[https://xeiaso.net/talks/2024/nix-docker-build/][This is usually pretty simple]], but for postgres things are a bit complicated you need the postgres user, postgres has initdb scripts, the official image makes use of [[https://github.com/tianon/gosu][gosu]] etc which I don't properly understand. I really didn't want to open this pandora's box, it'll take my time with no clear ROI. But guess I did it anyway.
#+end_quote
**** TODO Step 0: Do it without ~dockerTools~ / ~flakes~
#+begin_quote
This is the backup of me not being able to get to the desired outcome in time.
#+end_quote
- At the time of the writing I am unsure how long it'll take.
- So as a backup, I'll create a straightforward Dockerfile with WAL-G with relevant scripts backed in.
- This is actually the final result I want, doing it via ~dockerTools~ is the sidequest but if sidequest works out, we shall use it.
- This lives in the ~./normalDockerfile~ directory.
**** Step 1: Write the steps for sidequest
- [X] Breakdown official postgres image
- [X] Use [[https://ryantm.github.io/nixpkgs/builders/images/dockertools/][dockerTools]] to create a basic postgres image based on nixpkgs postgres
- [X] Add the scripts/relevant settings from the official repo and adapt them to ~dockerTools~.
- [X] Add extensions, this is pretty simple with nix!
- [ ] Add WAL-G and relevant scripts to be trigger at archival and restore and periodic. (document them aswell)
- [ ] Do a test run
- [ ] Cleanup this repo
- [ ] Go to sleep
*** Setting up ~wal-g~
#+begin_quote
Gitlab has an amazing runbook for wal-g
- https://gitlab.com/gitlab-com/runbooks/-/blob/master/docs/patroni/postgresql-backups-wale-walg.md
- https://archive.ph/83BLw
#+end_quote
I run my services in a nomad cluster, so there might be some context around it but I'll try to keep things generic.

Following are ~wal-g~ commands, what they do and when to run them.
| context     | wal-g command | what it does                                                       | when to run        | my opinion |
|-------------+---------------+--------------------------------------------------------------------+--------------------+------------|
| base-backup | ~backup-list~   | List of successful "base backups", also will have delta backups    | manually, to check |            |
|             |               | ~backup-list --detail --pretty~ is useful as-well                    |                    |            |
|             | ~backup-fetch~  |                                                                    |                    |            |
|             | ~backup-push~   | Create a full ~$PGDATA~ backup                                       |                    |            |
|             |               | ~backup-push~ will decide on it's own when to do delta or full       |                    |            |
|             | ~delete~        | ???                                                                |                    |            |
|-------------+---------------+--------------------------------------------------------------------+--------------------+------------|
| wal         | ~wal-fetch~     | fetches WALs as part of ~restore_command~                            | never run manually |            |
|             | ~wal-push~      | pushes WALs as part of ~archive_command~                             | never run manually |            |
|-------------+---------------+--------------------------------------------------------------------+--------------------+------------|
| replication | ~wal-receive~   | I haven't explored this yet, but can be an alternative to ~wal-push~ |                    |            |
|             | ~catchup-*~     | I haven't explored these yet                                       |                    |            |
**** Running auxalary services
- These would ideally go as systemd services
- If WAL shipping (archive_command) fails for some reason, WAL files will be kept on the server until the disk is running full!
- [[https://developer.hashicorp.com/nomad/tutorials/task-deps/task-dependencies-interjob][Express inter-job dependencies with init tasks | Nomad | HashiCorp Developer]]
** Other notes/references
*** TODO Aside on Backup ecosystem in Postgres
Now I observe the postgres community from the sidelines and I don't think I have any "real" postgres experience, however this is what i've figured reading the manual and opinion of other folks on the interwebs.
#+begin_quote
"pgBackRest is more conservative and kind of reliable, wal-g is more performant, both are much better than Barman"

I won't mention who said it, my real surname is ~Barman~ (check my github fr) and I am not offended.
#+end_quote
**** Replication vs Backup
****
*** Previous attempts
**** Creating normal Dockerfile (official docker image)
This image has a extension that i use but doesn't have wal-g in it.
#+begin_src Dockerfile
FROM postgres:16.2-bookworm AS builder

RUN apt-get update \
    && apt-get -y upgrade \
    && apt-get install -y --no-install-recommends \
    curl ca-certificates git\
    build-essential libpq-dev postgresql-server-dev-all
RUN update-ca-certificates

WORKDIR /srv
RUN git clone https://github.com/fboulnois/pg_uuidv7.git .
RUN for v in `seq 16`; do pg_buildext build-$v $v; done

# create tarball and checksums
RUN cp sql/pg_uuidv7--1.5.sql . && TARGETS=$(find * -name pg_uuidv7.so) \
  && tar -czvf pg_uuidv7.tar.gz $TARGETS pg_uuidv7--1.5.sql pg_uuidv7.control \
  && sha256sum pg_uuidv7.tar.gz $TARGETS pg_uuidv7--1.5.sql pg_uuidv7.control > SHA256SUMS

FROM postgres:16.2-bookworm AS runner

COPY --from=builder /srv/pg_uuidv7.tar.gz /srv/SHA256SUMS /srv/
COPY --from=builder /srv/${PG_MAJOR}/pg_uuidv7.so /usr/lib/postgresql/${PG_MAJOR}/lib
COPY --from=builder /srv/pg_uuidv7.control /usr/share/postgresql/${PG_MAJOR}/extension
COPY --from=builder /srv/pg_uuidv7--1.5.sql /usr/share/postgresql/${PG_MAJOR}/extension
#+end_src
**** ~dockerTools.fromImage~ (official docker image)
- ~dockerTools~ allow you pull from another image. So since the official comes with the starter scripts that run initdb and it does a lot of other things. I thought it would be nice to just use it. But it didn't work out.
- See [[https://discourse.nixos.org/t/building-on-dockerfile-based-images/29583][Building on dockerfile-based images - Help - NixOS Discourse]]
#+begin_src nix
# file: flake.nix
let
  # nix run nixpkgs#nix-prefetch-docker -- postgres --image-tag 16.2-bookworm --arch amd64 --os linux
  pg_amd64 = pkgs.dockerTools.pullImage {
    imageName = "postgres";
    imageDigest = "sha256:4aea012537edfad80f98d870a36e6b90b4c09b27be7f4b4759d72db863baeebb";
    sha256 = "1rizfs2f6l834cgym0jpp88g3r3mcrxn9fd58np91ny9fy29zyck";
    finalImageName = "postgres";
    finalImageTag = "16.2-bookworm";
    os = "linux";
    arch = "amd64";
  };
in {
  packages = {
    nix_postgres_docker = pkgs.dockerTools.buildLayeredImage  {
      name = builtins.getEnv "IMAGE_NAME";
      tag = builtins.getEnv "IMAGE_TAG";
      fromImage = pg_amd64; # TODO make conditional
      contents = with pkgs; [ cacert postgresql16Packages.pg_uuidv7 ];
      config = {
        Cmd = ["postgres"];
        entrypoint = [ "docker-entrypoint.sh" ];
      };
    };
  };
};
#+end_src

While this seems like it works from the face of it. Unfortunately or fortunately, it doesn't. @NoobZ and @ManoftheSea from the unofficial NixOS discord channel talked me out of this and I stopped trying to make this work. If someone is interested to make this work, here is where I got stuck: "no such file or directory". I am not sure why this happened, arch is what it should be and base image is a docker image so should not be nixos fsh issues.

#+begin_quote
Update!
I think i've found the issue, it's related to the shebang on top of the entrypoint file but eitheway I have dropped the idea of using ~fromImage~ for now and going all in on building it from nix derivations.

[[https://github.com/NixOS/nix/issues/1205#issuecomment-2161613130][Inconsistent treatment of /usr/bin/env in build sandbox vs. NixOS · Issue #1205 · NixOS/nix · GitHub]]
#+end_quote

Trying to install nixpkgs pg extensions into the correct location in the image would've been a real hassle.

#+begin_src bash
λ just docker-build # success
λ just docker-load # success
λ just docker-run # fail
exec /usr/local/bin/docker-entrypoint.sh: no such file or directory
error: Recipe `docker-run` failed on line 36 with exit code 1
#+end_src
:(
